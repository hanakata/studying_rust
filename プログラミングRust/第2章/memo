2章 Rustツアー

ダウンロードとインストール
Microsoft Visual C++ Build Tools 2017 と本体をダウンロードしてインストールする。
https://visualstudio.microsoft.com/ja/downloads/?rr=https%3A%2F%2Fwww.rust-lang.org%2Fja-JP%2Finstall.html
https://rustup.rs/

インストール確認
C:\Users\mkatayama>cargo --version
cargo 1.30.0 (a1a4ad372 2018-11-02)

C:\Users\mkatayama>rustc --version
rustc 1.30.1 (1433507eb 2018-11-07)

C:\Users\mkatayama>rustdoc --version
rustdoc 1.30.1 (1433507eb 2018-11-07)

cargo・・・コンパイルマネージャとパッケージマネージャ。
  Cargoを用いてプロジェクトを作成しプログラムをビルドし実行し外部ライブラリの管理を行う。
rustc・・・コンパイラ。cargoが起動してくれるが直接起動も可能。
rustdoc・・・ドキュメンテーションツール。通常cargoが起動する。

cargoを利用することで標準的なメタデータを適切に設定した新しいRustパッケージを作成できる。
コマンドと結果は以下。
c:\git\studying_rust\プログラミングRust\第2章>cargo new --bin hello
     Created binary (application) `hello` project
c:\git\studying_rust\プログラミングRust\第2章>cd hello

c:\git\studying_rust\プログラミングRust\第2章\hello>dir
 ドライブ C のボリューム ラベルがありません。
 ボリューム シリアル番号は 3212-78F3 です

 c:\git\studying_rust\プログラミングRust\第2章\hello のディレクトリ

2018/12/05  08:11    <DIR>          .
2018/12/05  08:11    <DIR>          ..
2018/12/05  08:11               105 Cargo.toml
2018/12/05  08:11    <DIR>          src
               1 個のファイル                 105 バイト
               3 個のディレクトリ  295,481,978,880 バイトの空き領域

c:\git\studying_rust\プログラミングRust\第2章\hello>
プログラムが他のライブラリに依存する場合、Cargo.tomlに記述する。
src配下は以下の通り。
c:\git\studying_rust\プログラミングRust\第2章\hello>cd src

c:\git\studying_rust\プログラミングRust\第2章\hello\src>dir
 ドライブ C のボリューム ラベルがありません。
 ボリューム シリアル番号は 3212-78F3 です

 c:\git\studying_rust\プログラミングRust\第2章\hello\src のディレクトリ

2018/12/05  08:11    <DIR>          .
2018/12/05  08:11    <DIR>          ..
2018/12/05  08:11                45 main.rs
               1 個のファイル                  45 バイト
               2 個のディレクトリ  295,480,623,104 バイトの空き領域

c:\git\studying_rust\プログラミングRust\第2章\hello\src>
main.rsの中身は以下の通りでHello Worldは書くことすら必要ない。
fn main() {
    println!("Hello, world!");
}

パッケージ内であればどこでもビルドと実行が可能。
コマンドはcargo run
c:\git\studying_rust\プログラミングRust\第2章\hello\src>cargo run
   Compiling hello v0.1.0 (C:\git\studying_rust\プログラミングRust\第2章\hello)
    Finished dev [unoptimized + debuginfo] target(s) in 20.42s
     Running `c:\git\studying_rust\プログラミングRust\第2章\hello\target\debug\h
ello.exe`
Hello, world!

保存場所はtarget\debug
c:\git\studying_rust\プログラミングRust\第2章\hello>dir target\debug
 ドライブ C のボリューム ラベルがありません。
 ボリューム シリアル番号は 3212-78F3 です

 c:\git\studying_rust\プログラミングRust\第2章\hello\target\debug のディレクトリ


2018/12/05  08:17    <DIR>          .
2018/12/05  08:17    <DIR>          ..
2018/12/05  08:16                 0 .cargo-lock
2018/12/05  08:16    <DIR>          .fingerprint
2018/12/05  08:16    <DIR>          build
2018/12/05  08:17    <DIR>          deps
2018/12/05  08:16    <DIR>          examples
2018/12/05  08:17               158 hello.d
2018/12/05  08:17           154,112 hello.exe
2018/12/05  08:17         1,560,576 hello.pdb
2018/12/05  08:16    <DIR>          incremental
2018/12/05  08:16    <DIR>          native
               4 個のファイル           1,714,846 バイト
               8 個のディレクトリ  295,417,270,272 バイトの空き領域

c:\git\studying_rust\プログラミングRust\第2章\hello>
終わったら削除することも可能。コマンドはcargo clean
実行するとtarget配下全てが削除される。
プロジェクトを作成するとHello Worldを表示するようなソースが作成されるみたい。。

試しに適当に作ってみたけど文法が分からず断念。

//関数 この場合引数を2つとる。->が返り値の型なので入力出力ともにu64型
// mutはmutableの略で代入可能にしてくれるもの。
fn gcd(mut n: u64, mut m: u64) -> u64 {
    // !はマクロ呼び出し。assertは真でなければメッセージを吐いて終了するのでnかmが0だったらメッセージはいて終了
    assert!(n != 0 && m != 0);
    while m != 0 {
        if m < n{
            //letはローカル変数を定義。
            let t = m;
            m = n;
            n = t;
        }
        m = m % n;
    }
    // セミコロンがない場合それがreturn扱いとなる。
    n
}

fnキーワードで関数を定義。
デフォルトでは一度初期化された変数は値を変えることは出来ない。
なので引数の前にmutキーワードをつかうことで関数内でこれらの変数に値を代入することは出来る。
!はマクロ呼び出し。assert!呼び出しで引数が真であることを確認する。
真でなければメッセージを出力して終了。
letはローカル変数を定義する。型は推論されるので明示する必要はない。
関数のボディがセミコロンなしで終わっている場合それがreturn扱いになる。
returnは早期リターンくらいでしか使わない。

Rustではテスト機構が組み込まれている。
書き方は以下。
// [test]で以降の関数がテスト関数であると定義
#[test]
fn test_gcd(){
    assert_eq!(gcd(14,15),1);
    assert_eq!(gcd(2 * 3 * 5 * 11 * 17, 3 * 7 * 1  * 13 * 19),3 * 11);
}

テスト関数はコンパイル時には無視されるがcargo testで実行すると実行される。
Hello Worldのテストは以下の通り
#[test]
fn test_main() {
    assert!(true, "Hello, world!");
}
assert_eqは数値のみっぽい。

Rustの標準ライブラリで何が出来るかを調べるにはオンラインドキュメントをみること。

Rustの利点のひとつ
→crates.ioで公開されている無償ライブラリの利用。
Rustのパッケージ＝クレート

httpサーバをクレートを使って作成する場合、
Cargo.tomlに以下内容を追記する。
[dependencies]
iron = "0.5.1"
mime = "0.2.3"
router = "0.5.1"
urlencoded = "0.5.0"
直接使うパッケージだけ書けばよく、それらに依存したものはcargoが勝手にやってくれる。

コードを書いて実行すると必要なもののダウンロードが始まった後、ビルドされる。超長い。