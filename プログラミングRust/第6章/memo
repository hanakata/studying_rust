6章 式

式は値があり文にはない。
Rustは式言語の一つ。
ifやswitchはCだと文。Rustだと値が作れるので式になる。
なので三項演算子はない。

ブロックも式になる。
ブロックの値はセミコロンがない場所。
なのでブロックの最後はセミコロンが存在しない。

expected type`()`が出たらセミコロン抜かしの可能性が高い。
空文もブロックにおけるが何の意味もない。

ifの条件はbool型の式でなければならない。
matchはswitchと似たような動きをするが、breakしなくても
どれか1つだけを実行する、default扱いにするには_を利用する。

if文にはif let式がある。
与えられた条件がマッチするかしないかの判断。ほかの言語だとif else
書き方は
if let pattern = expr {
    block1
}else{
    block2
}

if letを無理に使用しなくてもmatchで事足りる。

Rustのループは4つ
・while
・while let
・loop
・for in
ループ内でのみbreakを利用する。

returnは値を呼び出し元に返す。
関数呼び出しは関数名()でほかの言語と一緒。
staticメソッドとそうでないメソッドの違いはオブジェクト指向言語での違いと同じ。
staticでなければ値に対して呼ばれ(vec.len())、staticであれば型に対して呼ばれる。(Vec::new())

フィールドには名前ではなく番号がついている。
